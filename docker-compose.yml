version: '3.8'

services:
  # ================================
  # Main Application Service
  # ================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3011:3011"  # Frontend
      - "8000:8000"  # Backend API
    environment:
      # Database Configuration (matching .env)
      - MONGODB_URL=mongodb://e2425-wads-l4acg6:hoch22uc@mongo:27018/?authSource=e2425-wads-l4acg6
      - DATABASE_NAME=e2425-wads-l4acg6
      
      # JWT Configuration
      - SECRET_KEY=your_super_secret_key_here_change_in_production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      
      # Application Configuration
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - CORS_ORIGINS=["https://e2425-wads-l4acg6-client.csbihub.id","http://localhost:3011","http://127.0.0.1:3011"]
      
      # File Upload Configuration
      - MAX_FILE_SIZE=5242880
      - UPLOAD_DIR=/app/backend/uploads
      
      # Next.js Configuration
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://e2425-wads-l4acg6-server.csbihub.id/api
      - NEXT_PUBLIC_WS_URL=wss://e2425-wads-l4acg6-server.csbihub.id
    volumes:
      - uploads_data:/app/backend/uploads
    depends_on:
      - mongo
      - redis
    networks:
      - helpdesk_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # MongoDB Database Service
  # ================================
  mongo:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=e2425-wads-l4acg6
      - MONGO_INITDB_ROOT_PASSWORD=hoch22uc
      - MONGO_INITDB_DATABASE=e2425-wads-l4acg6
    volumes:
      - mongo_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27018:27017"  # Mapping to match .env port
    networks:
      - helpdesk_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # Redis Cache Service
  # ================================
  redis:
    image: redis:7.0-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - helpdesk_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Development Service (Optional)
  # ================================
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "3012:3011"  # Frontend dev server
      - "8001:8000"  # Backend dev server
    environment:
      # Database Configuration
      - MONGODB_URL=mongodb://e2425-wads-l4acg6:hoch22uc@mongo:27018/?authSource=e2425-wads-l4acg6
      - DATABASE_NAME=e2425-wads-l4acg6
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      
      # Development Configuration
      - DEBUG=true
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8001/api
      - NEXT_PUBLIC_WS_URL=ws://localhost:8001
    volumes:
      - .:/app
      - /app/frontend/node_modules
      - /app/backend/__pycache__
      - uploads_data:/app/backend/uploads
    depends_on:
      - mongo
      - redis
    networks:
      - helpdesk_network
    profiles:
      - dev

# ================================
# Named Volumes
# ================================
volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

# ================================
# Network Configuration
# ================================
networks:
  helpdesk_network:
    driver: bridge 