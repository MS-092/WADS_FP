name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test-backend:
    runs-on: [self-hosted, csbiweb]
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up test environment
      run: |
        cd backend
        cp .env .env.test
        echo "MONGODB_URL=mongodb://admin:password@localhost:27017/test_db?authSource=admin" >> .env.test
        echo "DATABASE_NAME=test_db" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "SECRET_KEY=test_secret_key_for_ci" >> .env.test
    
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --cov=app --cov-report=xml
      env:
        ENV_FILE: .env.test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        fail_ci_if_error: false

  test-frontend:
    runs-on: [self-hosted, csbiweb]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000/api
        NEXT_PUBLIC_WS_URL: ws://localhost:8000

  build-and-deploy:
    needs: [test-backend, test-frontend]
    runs-on: [self-hosted, csbiweb]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Backend Docker image
      run: |
        docker build -t helpdesk-backend:latest .
        docker build -t helpdesk-backend:${{ github.sha }} .
    
    - name: Build Frontend Docker image
      run: |
        cd frontend
        docker build \
          --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
          --build-arg NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }} \
          -t helpdesk-frontend:latest \
          -t helpdesk-frontend:${{ github.sha }} \
          .
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment on csbiweb runner..."
        
        # Create production docker-compose.yml with local images
        cat > docker-compose.prod.yml << EOF
        version: '3.8'
        services:
          backend:
            image: helpdesk-backend:${{ github.sha }}
            ports:
              - "8000:8000"
            environment:
              - MONGODB_URL=${{ secrets.MONGODB_URL }}
              - DATABASE_NAME=${{ secrets.DATABASE_NAME }}
              - SECRET_KEY=${{ secrets.SECRET_KEY }}
              - REDIS_URL=${{ secrets.REDIS_URL }}
              - DEBUG=False
              - HOST=0.0.0.0
              - PORT=8000
            restart: unless-stopped
            
          frontend:
            image: helpdesk-frontend:${{ github.sha }}
            ports:
              - "3000:3000"
            environment:
              - NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
              - NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }}
            restart: unless-stopped
            depends_on:
              - backend
        
          nginx:
            image: nginx:alpine
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - ./client_nginx.conf:/etc/nginx/nginx.conf:ro
            depends_on:
              - frontend
              - backend
            restart: unless-stopped
        EOF
        
        # Deploy using docker-compose on the self-hosted runner
        echo "Stopping existing containers..."
        docker-compose -f docker-compose.prod.yml down || true
        
        echo "Starting new containers..."
        docker-compose -f docker-compose.prod.yml up -d
        
        echo "Production deployment completed on csbiweb runner"
        
        # Clean up old images to save space
        echo "Cleaning up old Docker images..."
        docker image prune -f

  deploy-staging:
    needs: [test-backend, test-frontend]
    runs-on: [self-hosted, csbiweb]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and Deploy to Staging
      run: |
        echo "Building and deploying to staging environment on csbiweb runner..."
        
        # Build images for staging
        docker build -t helpdesk-backend:staging .
        
        cd frontend
        docker build \
          --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
          --build-arg NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }} \
          -t helpdesk-frontend:staging \
          .
        cd ..
        
        # Create staging docker-compose.yml
        cat > docker-compose.staging.yml << EOF
        version: '3.8'
        services:
          backend-staging:
            image: helpdesk-backend:staging
            ports:
              - "8001:8000"
            environment:
              - MONGODB_URL=${{ secrets.MONGODB_URL }}
              - DATABASE_NAME=${{ secrets.DATABASE_NAME }}_staging
              - SECRET_KEY=${{ secrets.SECRET_KEY }}
              - REDIS_URL=${{ secrets.REDIS_URL }}
              - DEBUG=True
              - HOST=0.0.0.0
              - PORT=8000
            restart: unless-stopped
            
          frontend-staging:
            image: helpdesk-frontend:staging
            ports:
              - "3001:3000"
            environment:
              - NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
              - NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }}
            restart: unless-stopped
            depends_on:
              - backend-staging
        EOF
        
        # Deploy staging
        docker-compose -f docker-compose.staging.yml down || true
        docker-compose -f docker-compose.staging.yml up -d
        
        echo "Staging deployment completed - accessible on port 3001"

  security-scan:
    runs-on: [self-hosted, csbiweb]
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 