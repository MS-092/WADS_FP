"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/register/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: () => (/* binding */ apiClient),\n/* harmony export */   getCurrentUserFromStorage: () => (/* binding */ getCurrentUserFromStorage),\n/* harmony export */   isAuthenticated: () => (/* binding */ isAuthenticated)\n/* harmony export */ });\nclass ApiClient {\n    refreshTokenFromStorage() {\n        if (true) {\n            this.token = localStorage.getItem('access_token');\n        }\n    }\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseURL).concat(endpoint);\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers\n            },\n            ...options\n        };\n        // Add Authorization header if token exists\n        if (this.token) {\n            config.headers = {\n                ...config.headers,\n                Authorization: \"Bearer \".concat(this.token)\n            };\n        }\n        try {\n            const response = await fetch(url, config);\n            const data = await response.json();\n            if (!response.ok) {\n                // Handle FastAPI validation errors (422)\n                if (response.status === 422 && data.detail && Array.isArray(data.detail)) {\n                    const errorMessages = data.detail.map((error)=>{\n                        const field = error.loc ? error.loc.join('.') : '';\n                        return field ? \"\".concat(field, \": \").concat(error.msg) : error.msg;\n                    }).join(', ');\n                    throw new Error(errorMessages);\n                }\n                // Handle other error formats\n                const errorMessage = data.detail || data.message || \"HTTP error! status: \".concat(response.status);\n                throw new Error(typeof errorMessage === 'string' ? errorMessage : JSON.stringify(errorMessage));\n            }\n            return {\n                data\n            };\n        } catch (error) {\n            console.error('API request failed:', error);\n            let errorMessage = 'Unknown error';\n            if (error instanceof Error) {\n                errorMessage = error.message;\n            } else if (typeof error === 'string') {\n                errorMessage = error;\n            } else if (error && typeof error === 'object') {\n                // Handle case where error might be an object\n                if (error.message) {\n                    errorMessage = error.message;\n                } else {\n                    errorMessage = JSON.stringify(error);\n                }\n            }\n            return {\n                error: errorMessage\n            };\n        }\n    }\n    // Authentication methods\n    async login(email, password) {\n        return this.request('/api/v1/auth/login', {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        });\n    }\n    async register(userData) {\n        return this.request('/api/v1/auth/register', {\n            method: 'POST',\n            body: JSON.stringify(userData)\n        });\n    }\n    logout() {\n        this.token = null;\n        if (true) {\n            localStorage.removeItem('access_token');\n            localStorage.removeItem('refresh_token');\n            localStorage.removeItem('user');\n        }\n    }\n    setToken(token) {\n        this.token = token;\n    }\n    async getCurrentUser() {\n        return this.request('/api/v1/auth/me');\n    }\n    // Ticket methods\n    async getTickets() {\n        return this.request('/api/v1/tickets/');\n    }\n    async getTicket(id) {\n        return this.request(\"/api/v1/tickets/\".concat(id));\n    }\n    async createTicket(ticketData) {\n        return this.request('/api/v1/tickets/', {\n            method: 'POST',\n            body: JSON.stringify(ticketData)\n        });\n    }\n    async updateTicket(id, updates) {\n        return this.request(\"/api/v1/tickets/\".concat(id), {\n            method: 'PUT',\n            body: JSON.stringify(updates)\n        });\n    }\n    async assignTicket(ticketId, agentId) {\n        const body = agentId ? {\n            agent_id: parseInt(agentId)\n        } : {};\n        return this.request(\"/api/v1/tickets/\".concat(ticketId, \"/assign\"), {\n            method: 'PUT',\n            body: JSON.stringify(body)\n        });\n    }\n    async addComment(ticketId, commentData) {\n        return this.request(\"/api/v1/tickets/\".concat(ticketId, \"/comments\"), {\n            method: 'POST',\n            body: JSON.stringify(commentData)\n        });\n    }\n    // User methods\n    async getUsers() {\n        return this.request('/api/v1/users/');\n    }\n    async getUser(id) {\n        return this.request(\"/api/v1/users/\".concat(id));\n    }\n    async updateUser(id, userData) {\n        return this.request(\"/api/v1/users/\".concat(id), {\n            method: 'PUT',\n            body: JSON.stringify(userData)\n        });\n    }\n    // Chat methods\n    async getChatMessages(ticketId) {\n        return this.request(\"/api/v1/chat/\".concat(ticketId, \"/messages\"));\n    }\n    async sendChatMessage(ticketId, message) {\n        return this.request(\"/api/v1/chat/\".concat(ticketId, \"/messages\"), {\n            method: 'POST',\n            body: JSON.stringify({\n                message\n            })\n        });\n    }\n    // Chat room methods\n    async getChatRooms() {\n        return this.request('/api/v1/chat/rooms');\n    }\n    async getChatRoom(roomId) {\n        return this.request(\"/api/v1/chat/rooms/\".concat(roomId));\n    }\n    async getRoomMessages(roomId) {\n        let skip = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, limit = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 50;\n        return this.request(\"/api/v1/chat/rooms/\".concat(roomId, \"/messages?skip=\").concat(skip, \"&limit=\").concat(limit));\n    }\n    async sendRoomMessage(roomId, content) {\n        let messageType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'text';\n        return this.request(\"/api/v1/chat/rooms/\".concat(roomId, \"/messages\"), {\n            method: 'POST',\n            body: JSON.stringify({\n                content,\n                message_type: messageType\n            })\n        });\n    }\n    async createChatRoom(roomData) {\n        return this.request('/api/v1/chat/rooms', {\n            method: 'POST',\n            body: JSON.stringify(roomData)\n        });\n    }\n    // Notifications methods\n    async getNotifications() {\n        return this.request('/api/v1/notifications/');\n    }\n    async markNotificationAsRead(id) {\n        return this.request(\"/api/v1/notifications/\".concat(id, \"/read\"), {\n            method: 'PUT'\n        });\n    }\n    // File upload\n    async uploadFile(file, ticketId) {\n        const formData = new FormData();\n        formData.append('file', file);\n        if (ticketId) {\n            formData.append('ticket_id', ticketId);\n        }\n        const config = {\n            method: 'POST',\n            body: formData,\n            headers: {}\n        };\n        if (this.token) {\n            config.headers = {\n                Authorization: \"Bearer \".concat(this.token)\n            };\n        }\n        try {\n            const response = await fetch(\"\".concat(this.baseURL, \"/api/v1/files/upload\"), config);\n            const data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.detail || 'Upload failed');\n            }\n            return {\n                data\n            };\n        } catch (error) {\n            return {\n                error: error instanceof Error ? error.message : 'Upload failed'\n            };\n        }\n    }\n    // Health check\n    async healthCheck() {\n        return this.request('/health');\n    }\n    constructor(){\n        this.token = null;\n        this.baseURL = \"http://localhost:8000\" || 0;\n        // Get token from localStorage if available\n        this.refreshTokenFromStorage();\n    }\n}\n// Create a singleton instance\nconst apiClient = new ApiClient();\n// Helper function to get user from localStorage\nconst getCurrentUserFromStorage = ()=>{\n    if (true) {\n        const userStr = localStorage.getItem('user');\n        return userStr ? JSON.parse(userStr) : null;\n    }\n    return null;\n};\n// Helper function to check if user is authenticated\nconst isAuthenticated = ()=>{\n    if (true) {\n        return !!localStorage.getItem('access_token');\n    }\n    return false;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});